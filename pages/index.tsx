import Head from "next/head";
import MenuItems from "../components/menu/MenuItems";
import { useSteps } from "../context/StepContext";
import SummaryButton from "../components/ui/buttons/SummaryButton";
import Modal from "../components/ui/modal/Modal";
import ModalContent from "../components/ui/modal/ModalContent";
import Calendar from "../components/calendar/Calendar";
import { MenuHeader } from "../components/menu/MenuHeader";
import React, { useEffect, useState } from "react";
import { useQuery } from "urql";
import { FETCH_DAY } from "../utils/graphql/saveMenu";
import { useMenu } from "../context/MenuContext";
import { useUser } from "@auth0/nextjs-auth0/client";
import axios from "axios";

const { AnimatePresence } = require("framer-motion");

export default function Home() {
  const {
    menuItems,
    removeMenuItem,
    menuDate,
    setMenuDate,
    setMenuItems,
    setWholeMenu,
    getMenuForDate,
  } = useMenu();
  const { modalOpen, setModalOpen, setCurrentStep } = useSteps();
  const [showCalories, setShowCalories] = useState(false);
  const { user, error: userError, isLoading } = useUser();
  const [calendarOpen, setCalendarOpen] = useState(false);

  const closeModal = () => {
    setModalOpen(false);
  };
  const openModal = () => {
    setModalOpen(true);
  };

  const formattedDate = menuDate.toDateString();

  //TODO - results runs every time, even for not authenticated users. Need to fix this.
  //Fetch menu for the day
  const [results] = useQuery({
    query: FETCH_DAY,
    variables: { userId: user?.email },
  });

  const { data, fetching, error } = results;

  useEffect(() => {
    if (data && data.days?.data.length > 0) {
      //map menu to array
      const mappedMenu = data.days?.data.map((day: any) => {
        return {
          id: day.id,
          date: day.attributes.date,
          menu: day.attributes.menu,
        };
      });
      setMenuDate(menuDate);
      setWholeMenu(mappedMenu);
    }
  }, [data, setMenuItems, setWholeMenu]);

  if (fetching) return <p>Loading...</p>;
  if (error) return <p>Oh no... {error.message}</p>;

  return (
    <>
      <Head>
        <title>MealMaster</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={"max-w-lg mx-auto my-16 flex flex-col"}>
        <MenuHeader
          formattedDate={formattedDate}
          onChange={() => setShowCalories(!showCalories)}
          checked={showCalories}
          disabled={modalOpen}
          onCalendarClick={() => setCalendarOpen(true)}
        />
        <AnimatePresence>
          {calendarOpen && <Calendar onClose={() => setCalendarOpen(false)} />}
        </AnimatePresence>
        <MenuItems showCalories={showCalories} />
        {!modalOpen && <SummaryButton />}
      </div>

      <div className={"h-full w-screen"}>
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={closeModal}>
              <ModalContent />
            </Modal>
          )}
        </AnimatePresence>
      </div>

      <div className={"flex gap-2"}>
        <a
          className={"p-2 w-16 bg-green text-white rounded-sm text-center"}
          href="/api/auth/login"
        >
          Login
        </a>
        <a
          className={"p-2 w-16 bg-gray-600 text-white rounded-sm text-center"}
          href="/api/auth/logout"
        >
          Logout
        </a>
      </div>
    </>
  );
}
