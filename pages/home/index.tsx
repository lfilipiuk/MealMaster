import Head from "next/head";
import MenuItems from "../../components/menu/MenuItems";
import { useSteps } from "../../context/StepContext";
import SummaryButton from "../../components/ui/buttons/SummaryButton";
import Modal from "../../components/ui/modal/Modal";
import ModalContent from "../../components/ui/modal/ModalContent";
import Calendar from "../../components/calendar/Calendar";
import { MenuHeader } from "../../components/menu/MenuHeader";
import React, { useEffect, useState } from "react";
import { useMenu } from "../../context/MenuContext";
import { useUser } from "@auth0/nextjs-auth0/client";
import { getAllMeals } from "../../utils/mongo/api-util";
import { DUMMY_MENU } from "../../utils/DUMMY_MENU";
import { LogoutButton } from "../../components/ui/buttons/LogoutButton";
import LoginButton from "../../components/login/LoginButton";
import { UserProfileButton } from "../../components/ui/buttons/UserProfileButton";
import { fetchMenus, saveAndLoadMenus } from "../../utils/api/functions";
const { AnimatePresence } = require("framer-motion");

//TODO: form display ingredients correctly
//TODO - (when pressing trash can, when meal empty, it should also refresh)

export default function Home({ data }: any) {
  const {
    menuDate,
    setMenuItems,
    menuItems,
    setWholeMenu,
    getMenuForDate,
    shouldReload,
    setShouldReload,
  } = useMenu();
  const { modalOpen, closeModal } = useSteps();
  const [showCalories, setShowCalories] = useState(false);
  const { user, error: userError, isLoading } = useUser();
  const [calendarOpen, setCalendarOpen] = useState(false);
  const userEmail = user?.email;

  const formattedDate = menuDate.toDateString();

  useEffect(() => {
    async function getMenus() {
      const { menuItems: fetchedMenuItems, mappedMenu } = await fetchMenus(
        userEmail,
        menuDate
      );
      setMenuItems(fetchedMenuItems);
      setWholeMenu(mappedMenu);
    }

    if (user) {
      getMenus().then(() => {});
    }
  }, [user]);

  useEffect(() => {
    async function handleSaveAndLoad() {
      const { menuItems: fetchedMenuItems, mappedMenu } =
        await saveAndLoadMenus(menuDate, menuItems, userEmail);
      setMenuItems(fetchedMenuItems);
      setWholeMenu(mappedMenu);
    }

    if (shouldReload) {
      //console.log("should reload");
      handleSaveAndLoad().then((r) => {
        setShouldReload(false);
      });
    }
  }, [shouldReload]);

  useEffect(() => {
    setMenuItems(getMenuForDate(menuDate).menu);
  }, [menuDate]);

  if (!user && !isLoading) {
    //redirect to landing page
    return (
      <div className={"flex flex-col items-center justify-center h-screen"}>
        <h1 className={"text-4xl font-bold"}>MealMaster</h1>
        <LoginButton text={"login"} />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>MealMaster</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <div className={"max-w-lg mx-auto my-16 flex flex-col"}>
        <MenuHeader
          formattedDate={formattedDate}
          onChange={() => setShowCalories(!showCalories)}
          checked={showCalories}
          disabled={modalOpen}
          onCalendarClick={() => setCalendarOpen(true)}
        />

        <AnimatePresence>
          {calendarOpen && (
            <Calendar onClose={() => setCalendarOpen(false)} value={menuDate} />
          )}
        </AnimatePresence>
        <MenuItems showCalories={showCalories} meals={menuItems} />

        {/* TODO: buttons in a relative/absolute section */}
        {!modalOpen && (
          <>
            <div className={"fixed bottom-10 right-10 flex flex-col gap-2"}>
              {/*<UserProfileButton />*/}
              <SummaryButton />
              <LogoutButton />
            </div>
          </>
        )}
      </div>

      <div className={"h-full w-screen"}>
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={closeModal}>
              <ModalContent meals={data} menu={menuItems} />
            </Modal>
          )}
        </AnimatePresence>
      </div>

      <div className={"flex gap-2"}>
        {!user && (
          // eslint-disable-next-line @next/next/no-html-link-for-pages
          <LoginButton text={"Login"} />
        )}
      </div>
    </>
  );
}

//FIXME - this shouldn't be static props...
export const getServerSideProps = async () => {
  const meals = await getAllMeals();

  return {
    props: {
      data: meals,
    },
  };
};
